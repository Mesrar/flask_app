{"version":3,"sources":["logo.svg","MapChart.js","App.js","reportWebVitals.js","index.js"],"names":["colors","offsets","VT","NH","MA","RI","CT","NJ","DE","MD","DC","statesWithColors","allStates","map","state","fill","Math","random","length","toFixed","MapChart","useState","activeGeo","setActiveGeo","projection","geography","id","geographies","geo","cur","find","s","val","onClick","fetch","concat","then","res","json","data","Alert","JSON","stringify","onMouseEnter","onMouseLeave","stroke","rsmKey","rgb","centroid","geoCentroid","textFill","hex","result","exec","parseInt","hexToRgb","round","Object","keys","indexOf","coordinates","y","fontSize","textAnchor","style","cursor","subject","dx","dy","x","alignmentBaseline","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83bbb8ed.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, {useEffect, useState} from \"react\";\nimport ReactDOM from 'react-dom';\nimport { Alert } from 'react-st-modal';\n\nimport { geoCentroid } from \"d3-geo\";\nimport {\n    ComposableMap,\n    Geographies,\n    Geography,\n    Marker,\n    Annotation\n} from \"react-simple-maps\";\n\nimport allStates from \"./data/allstates.json\";\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\nconst highlight = \"#f5821f\";\n\nconst colors = [\"#0e3b5e\", \"#0077c9\", \"#43b4ff\", \"#c0e6ff\"];\n\n\n\nconst hexToRgb = hex => {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? [\n            parseInt(result[1], 16),\n            parseInt(result[2], 16),\n            parseInt(result[3], 16)\n        ]\n        : null;\n};\n\nconst getTextColor = rgb => {\n    const o = Math.round(\n        (parseInt(rgb[0], 10) * 299 +\n            parseInt(rgb[1], 10) * 587 +\n            parseInt(rgb[2], 10) * 114) /\n        1000\n    );\n    return o > 125 ? \"#444444\" : \"#FFFFFF\";\n};\n\nconst offsets = {\n    VT: [50, -8],\n    NH: [34, 2],\n    MA: [30, -1],\n    RI: [28, 2],\n    CT: [35, 10],\n    NJ: [34, 1],\n    DE: [33, 0],\n    MD: [47, 10],\n    DC: [49, 21]\n};\n\nconst statesWithColors = allStates.map(state => ({\n    fill: colors[(Math.random() * (colors.length - 1)).toFixed()],\n    ...state\n}));\n\nconst getData = (id) => {\n    fetch('/api/doc/v1/plants/'.concat(id)).then(res => res.json()).then(data => {\n\n        return Alert('Plant count :'.concat(JSON.stringify(data[\"abs_value\"]).concat('\\t')).\n        concat(\"Percentage by State: \").concat(JSON.stringify(data[\"percent\"])) , \"State of :\".concat(id));\n    });\n\n}\n\nconst MapChart = () => {\n    const [activeGeo, setActiveGeo] = useState(\"\");\n\n    return (\n        <ComposableMap projection=\"geoAlbersUsa\">\n            <Geographies geography={geoUrl} id=\"test\">\n                {({ geographies }) => (\n                    <>\n                        {geographies.map(geo => {\n                            const cur = statesWithColors.find(s => s.val === geo.id);\n                            return (\n                                <Geography\n                                    key={geo.rsmKey}\n                                    geography={geo}\n                                    onClick={() => getData(cur.id)}\n                                    onMouseEnter={() => setActiveGeo(geo.id)}\n                                    onMouseLeave={() => setActiveGeo(null)}\n                                    fill={geo.id === activeGeo ? highlight : cur.fill}\n                                    stroke=\"#FFFFFF\"\n                                />\n                            );\n                        })}\n                        {geographies.map(geo => {\n                            const centroid = geoCentroid(geo);\n                            const cur = statesWithColors.find(s => s.val === geo.id);\n                            const textFill = getTextColor(hexToRgb(cur.fill));\n                            return (\n                                <g key={geo.rsmKey + \"-name\"}>\n                                    {cur &&\n                                    centroid[0] > -160 &&\n                                    centroid[0] < -67 &&\n                                    (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                                        <Marker coordinates={centroid}>\n                                            <text\n                                                y=\"2\"\n                                                fontSize={14}\n                                                textAnchor=\"middle\"\n                                                onMouseEnter={() => setActiveGeo(geo.id)}\n                                                onMouseLeave={() => setActiveGeo(null)}\n                                                style={{ cursor: \"pointer\" }}\n                                                fill={geo.id === activeGeo ? \"#FFFFFF\" : textFill}\n                                            >\n                                                {cur.id}\n                                            </text>\n                                        </Marker>\n                                    ) : (\n                                        <Annotation\n                                            subject={centroid}\n                                            dx={offsets[cur.id][0]}\n                                            dy={offsets[cur.id][1]}\n                                        >\n                                            <text\n                                                x={4}\n                                                fontSize={14}\n                                                alignmentBaseline=\"middle\"\n                                                onMouseEnter={() => setActiveGeo(geo.id)}\n                                                onMouseLeave={() => setActiveGeo(null)}\n                                                style={{ cursor: \"pointer\" }}\n                                            >\n                                                {cur.id}\n                                            </text>\n                                        </Annotation>\n                                    ))}\n                                </g>\n                            );\n                        })}\n                    </>\n                )}\n            </Geographies>\n        </ComposableMap>\n    );\n};\n\nexport default MapChart;","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MapChart from \"./MapChart\";\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <div>\n        <MapChart />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}